1718
IEEE COMMUNICATIONS LETTERS, VOL. 19, NO. 10, OCTOBER 2015
Delay Minimization for Progressive Construction
of Satellite Constellation Network
Zhe Liu, Wei Guo, Weisheng Hu, and Ming Xia
Abstract—During the construction of satellite constellation,
communication relay service could be provided by a partially
constructed constellation through buffering data and forwarding
it at a later time. However, this will introduce extra end-to-end
delay during the construction period. We propose a scheme to
determine an optimal construction process, which is used to insert
satellites into appropriate positions in each stage of construction.
Simulation results show that our scheme can reduce the average
end-to-end delay by 70.1% compared to the traditional scheme.
Index Terms—Progressive construction, satellite constellation
network, end-to-end delay.
I. INTRODUCTION
S
ATELLITE constellation networks, such as Iridium-Next
[1], Globalstar-2 [2] and Orbcomm-2 [3], typically need
several stages to complete the construction. Each stage usu-
ally takes several months, during which only a few satellites
could be inserted into target positions. In the constellation
construction, a partially formed constellation could buffer data
on certain satellites, and forward the data at a later time when
the links between satellites and users become available [4]–[6].
This strategy could provide relay services to users in areas
where terrestrial communication infrastructure is not available.
However, extra end-to-end delay is introduced in this period.
Moreover, different schemes for constructing constellation may
result in different intermediate satellite networks, hence yield-
ing different end-to-end delay. In fact, a carefully planned
process for the satellite network will serve users with low end-
to-end delay, which is an important service target in [7].
Itisnecessarytounderstandhowaconstellationshouldbepro-
gressively constructed over time. For example, Fig. 1(a) and (b)
showtwo partially formed constellationswith differentconstruc-
tion processes. In each stage, the process in Fig. 1(a) inserts sat-
ellites into different planes, while the process in Fig. 1(b) inserts
satellites into one plane. By the end of the ﬁrst stage, Fig. 1(c)
and (d) show the time windows of ground-satellite links (GSLs)
within the case of Fig. 1(a) and (b), respectively. In Fig. 1(c), u1
will wait until t1 to upload data to s21 when the data arrive at u1
on t0. Then, the uploaded data needs to be carried and stored on
s21 for a time period T1 due to such long distance between u1
and u2. Finally, the data can be downloaded to u2 as early as at
t2. Similarly, if the process in Fig. 1(b) is taken, data will arrive
Manuscript received February 14, 2015; revised July 11, 2015; accepted
July 24, 2015. Date of publication July 29, 2015; date of current version
October 8, 2015. This work was supported by the National Science Foundation
of China under Grants 61471238, 61433009 and by CAST Foundation. The
associate editor coordinating the review of this paper and approving it for
publication was G. Giambene.
Z. Liu, W. Guo, and W. Hu are with the State Key Lab of Advanced Op-
tical Communication Systems and Networks, Shanghai Jiao Tong University,
Shanghai 200240, China (e-mail: wguo@sjtu.edu.cn).
M. Xia is with Ericsson Research, San Jose, CA 95134 USA.
Digital Object Identiﬁer 10.1109/LCOMM.2015.2462358
Fig. 1. Example of constellation construction.
at u2 as early as at t4. Due to t4 ≫t2, it is reasonable to claim
that the former construction process is better than the latter.
In this letter, we propose a scheme to minimize the delay
by designing an optimal construction process. We also evaluate
the delay performance in the construction period. In each stage,
our scheme decides the positions which satellites should be
inserted into, and we analyze its fuel cost and time cost. Finally,
simulation results indicate that our scheme can reduce average
end-to-end delay by 70.1%, compared to the traditional scheme
which inserts the satellites into one orbital plane in each stage.
II. PROBLEM STATEMENT
A. Network Model
Time-varying graph (TVG) is a useful high level abstraction
for studying connectivity over time in the satellite network.
Recently, the authors in [8] have proposed a uniﬁed framework
for TVGs, and following this framework, we will use their
deﬁnitions and notations in our analysis.
Let U be a set of M users, namely U = {u1, · · · , uM}. Satel-
lites will be launched and injected into N positions which are
evenly distributed among P orbits. Satellite in the j-th position
of the i-th orbit is denoted as s(i,j). As a result, the set of these
N satellites is denoted as S = {s(i,j)|1 ≤i ≤P, i ≤j ≤N/P}.
Vertices representing the satellites and users are denoted as
V = U ∪S. There are no edges between users. Users do not
relay messages between satellites, not like the users in [4].
Thus, the set of possible edges between vertices and satellites
is denoted as E = {(v, s) : v ∈V, s ∈S}. Events occur over a
time span T ⊆T, where T is the temporal domain. In a general
case, a TVG is denoted as a tuple:
G = (V, E, T , ρ, ζ).
(1)
ρ :E×T →{0, 1} is called presence function of edge, which
indicates whether a given edge e = (v, s) exists at a given time.
1558-2558 © 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2025 at 06:58:31 UTC from IEEE Xplore.  Restrictions apply. 

LIU et al.: DELAY MINIMIZATION FOR PROGRESSIVE CONSTRUCTION OF SATELLITE CONSTELLATION NETWORK
1719
ζ :E × T →T is called latency function of edge, which indi-
cates the transmission latency over a given edge at a given time.
ψ :V × T →{0, 1} is called presence function of vertex, which
indicates whether a given vertex exists at a given time. The
bandwidth of edge e at a given time t is assumed to be B(e, t).
The construction of satellite constellation network includes
K stages, where K ≥1. The time for k-th stage is denoted as
[t1
k, t2
k) with a duration Tk =t2
k −t1
k. During the k-th stage, a set of
Lk satellites will be launched at time t1
k, and will be inserted into
theirtargetpositionsattime t2
k, namely Sk ={s1, · · · , sLk}. These
satellites will be able to provide communication relay service at
time t2
k, namely ψ(s, t)=1, t≥t2
k, s∈Sk. Furthermore,each user
exists during the whole time span, namely ψ(u, t)=1, ∀t∈T .
When satellite s is available at t2
k, there exist n time windows
on edge e connecting satellite s and vertex v, namely:
Wt2
k(e) = [t1, t2) ∪· · · ∪[t2n−1, t2n), t1 ≥t2
k.
(2)
We deﬁne the gap between two neighbor windows as:
gi(e) = t2i+1 −t2i, i ≤i ≤n −1.
(3)
B. Routing in the Satellite Network
In TVGG,thereare|R|requestsgeneratedduring timespanT .
Each request r∈R is represented as r=(s, d, ts, TTL, m), where
s and d are the source and the destination, ts is the arrival time,
TTL is the time-to-live parameter, and m is the message size.
We use a modiﬁcation of Dijkstra’s shortest path routing algo-
rithm to compute Earliest Delivery paths, named DED [9]. DED
algorithm uses the knowledge of time windows on all edges. In
the algorithm description, Wts+TTL
c(u)+ts(e) is the time windows of e in
[c(u)+ts, ts+TTL). Line 8 checks each time window [t2i, t2i+1)
which is belonged to Wts+TTL
c(u)+ts(e). In line 9, t2i−c(u)−ts is the
period of data stored at vertex u, namely the waiting time for a
valid time window of edge e, while ζ(e, t2i) is the propagation
delay of edge e at time t2i. Thus, a message will reach vertex v
at time t2i+ζ(e, t2i) if edge e is chosen. This algorithm differs
from the original Dijkstra’s algorithm in lines 7 and 8, as well as
no replacement waiting cost and cost function in lines 9 and 10.
Algorithm 1 DED Algorithm
Input: G = (V, E, T , ρ, ζ), r = (s, d, ts, TTL, m).
Output: J = (e1, t1), (e2, t2), · · · , (eh, th).
1: V1 ←V.
2: cs ←0, cv ←∞, ∀v ∈V s.t. v ̸= s.
3: while V1 ̸= ∅do
4:
Let u ∈V1 be the vertex s.t. c(u) = minx∈V1 c(x).
5:
V1 = V1 −{u}.
6:
for each edge e ∈E s.t. e = (u, v) do
7:
if Wts+TTL
c(u)+ts(e) ̸= ∅then
8:
for each [t2i, t2i+1) ∈Wts+TTL
c(u)+ts(e) do
9:
if c(v) > t2i −ts + ζ(e, t2i) then
10:
c(v) ←c(u) + (t2i −c(u) −ts) + ζ(e, t2i).
11:
end if
12:
end for
13:
end if
14:
end for
15: end while
DED calculates a journey J for each r, namely a sequence
of h couples (e, t) between vertices s and d:
J = (e1, t1), (e2, t2), · · · , (eh, th).
(4)
The difference between J and conventional path e1 →e2 →
· · · →eh is that J must satisfy the constraints of ti+1 ≥ti +
ζ(ei, ti) for all i < h. The time needed for a message travel
along journey is:
|J |t = th + ζ(eh, th) −ts.
(5)
Journey J is valid for request r if |J |t ≤TTL. For each
tuple (ei, ti), we can ﬁnd a time window [t1
i , t2
i ) for edge ei
such that ρ[t1
i ,t2
i )(ei, ti) = 1, ti ∈[t1
i , t2
i ). Thus, the maximum
capacity volume of edge ei during time window [t1
i , t2
i ) is:
C(ei) =
 t2
i
ti
B(ei, t) dt.
(6)
The capacity of journey J is denoted as:
C(J ) = min
1≤i≤h C(ei).
(7)
After DED calculates a valid journey for request r, the time
windows of edge ei along journey J , used to send message of
C(J ) size, is removed from the available time windows of edge
ei along journey J in TVG G. As a result, the time windows of
edge ei will not be shared by other journeys. If C(J ) is smaller
than m, DED routes another valid journey for r based on the
updated TVG G. Therefore, request r can be satisﬁed if there
exist n valid journeys such that n
i=1C(J ) ≥m. The size of
message travel along the n-th journey is m −n−1
i=1 C(J ). The
end-to-end delay of request r is calculate as the time of n valid
journeys (n > 1), namely:
D = n−1
i=1
C(Ji)
m
|Ji|t + m −n−1
i=1 C(Ji)
m
|Jn|t.
(8)
Thus, the objective of progressive construction of satellite
constellation network is to determine an optimal construction
process {s1, · · · , sL1}1, · · · , {s1, · · · , sLK}K such that the over-
all end-to-end delay for all requests is minimized.
III. PROGRESSIVE CONSTRUCTION SCHEME
In this section, we describe our scheme to insert satellites
into appropriate target positions belonging to different orbital
planes. And then, we analyze the extra-fuel cost and the time
deployment cost to achieve our scheme.
A. Progressive Construction Scheme
If the time windows on edges between users and satellites
could be distributed more evenly, the waiting time for users to
access to satellites, as the main source of end-to-end delay, can
be reduced. Thus, it is important to insert satellites into their
target positions with a better time window distribution in each
stage. In order to achieve this goal, we will use the standard de-
viation (STD) of gaps between the time windows, which has the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2025 at 06:58:31 UTC from IEEE Xplore.  Restrictions apply. 

1720
IEEE COMMUNICATIONS LETTERS, VOL. 19, NO. 10, OCTOBER 2015
same units as the end-to-end delay and can reﬂect the distribu-
tion situation of the time windows, on edge e after time t2
k−1 to
characterize Wt2
k−1:
σt2
k−1(e) =



n−1
i=1

gi(e) −g(e)
2
n −1
,
(9)
where g(e) is equal to n−1
i=1 gi(e)
n−1
.
|S′
k−1| satellites can provide relay services at t2
k−1:
S′
k−1 =

∅,
k = 1,
S1 ∪· · · ∪Sk−1,
k > 1.
(10)
The edges connecting user u and satellite s in S′
k−1 are de-
noted as Eu = {(u, s) : s ∈S′
k−1}. Therefore, after time t2
k−1, the
time windows of Eu becomes Wt2
k−1(Eu) = Wt2
k−1(e1) ∪· · · ∪
Wt2
k−1(e|S′
k−1|). Furthermore, all the time windows of edge Eu
after time t2
k−1 can be represented as Wt2
k−1(Eu) = WS′
k−1(u).
Therefore, the STD of gaps between time windows on Eu after
time t2
k−1 is represented as σS′
k−1(u). The average STD of gaps
for M users after time t2
k−1 is calculated as follows:
σS′
k−1(u) =
M
i=1σS′
k−1(ui)
M
.
(11)
We use a scheme called min σ, to decide the Lk positions
belonged to NP different orbital planes that satellites should be
inserted into during stage k.
Step 1: Available satellites in subset Sk are distributed among
P(Sk) orbital planes. For example, satellite s11 and s31 are
distributed among P(Sk) = 3 adjacent planes: planes 1, 2 and 3.
Initially, we set Sk = ∅, resulting in P(Sk) = 0.
Step 2: There exists a subset S∗⊆S at time t2
k such that
any position s ∈S∗satisﬁes the constraint P(Sk ∪{s}) ≤NP.
For any s ∈S∗, we can ﬁnd s′ ∈S′
k−1 such that an ISL e =
(s, s′) could be maintained after time t2
k. If S′
k−1 = ∅, S∗is
set as S. If position s ∈S∗is injected into a satellite dur-
ing stage k, the satellite subset available at time t2
k is S′
k =
S′
k−1 ∪Sk ∪{s}, s ∈S∗. Time windows on Eu = {(u, s) : s ∈
S′
k} after time t2
k are WS′
k(u) = Wt2
k(e1) ∪· · · ∪Wt2
k(e|S′
k|), where
e|S′
k|−1 = (u, s|S′
k−1|) and e|S′
k| = (u, s).
Step 3: s∗is the position such that average STD of gaps be-
tween time windows for M users after time t2
k is minimized,
namely σS′∗
k (u) = mins∈S∗σS′
k(u). Thus, s∗is the position that
satellite should be inserted into during stage k, namely Sk =
Sk ∪{s∗}.
Step 4: Redo Steps 2 and 3 until |Sk| = Lk.
Fig. 2 shows the time windows of four edges. For simplicity,
1 satellite is launched during each stage.According to Step2, we
can set S′
0 = ∅and S∗= {s1, s2}. Thus, S′
1 = {s1} will result in
σS′
1(u)=10.39,while S′
1={s2} will result in σS′
1(u)=0. Accord-
ing to Step 3, satellite should be inserted into s2 during stage 1.
Similarly, satellite should be inserted into s1 during stage 2.
Fig. 2. The time windows of four edges.
TABLE I
THE TIME DEPLOYMENT AND FUEL COST
B. Cost Analysis of Extra-Fuel and Time Deployment
In each stage, target positions in our scheme may belong to
NP different orbital planes. To achieve this goal, the oblateness
of the Earth gravity could be used to achieve right ascension
ascending node (RAAN, ) separation. Thus, all the satellites
can be injected into the same drifting orbit, and each satellite
raises itself to its target positions when the drifting and the
target orbital planes overlap.
The drift rate of  for a near-circular orbit is model [10]:
′ ∼= −2.0647 × 1014 · a−3.5 · cos i,
(12)
where ′ is the drift of RAAN per day, a is the semi-major
axis in kilometers, and i is the inclination. Thus, time TP
for achieving desired RAAN separation  is calculated as:
TP = /′, where ′ = ′
d −′
t is the difference in
the drift rate between the drifting and target orbits. Moreover,
the difference in the orbital velocity between the drifting orbit
and the target orbit is Vd→t = √μE/ad −√μE/at, where
μE is the gravitational constant 3.986 × 105km3/s2. Thus, the
minimum additional mass of fuel mf to achieve Vd→t from a
speciﬁc impulse Isp of propulsion system is:
mf
mf + ms
= exp
	−Vd→t
g · Isp

,
(13)
where g = 9.8 m/s2 is the gravitational acceleration and ms is
dry mass of satellite. Time cost TH for orbit transferring is TH =
π

(ad + at)3/8μE.
Satellite should be injected into an appropriate position in
the drifting orbit at the beginning of each stage such that the
difference in phasing between target position and the satel-
lite in drifting orbit at the beginning of orbit transferring is
θ = π −π

((at + ad)/2at)3. As a result, the satellite will
be exactly inserted into target position in target orbit at the
end of orbit transferring. Moreover, the minimum time duration
needed to insert Lk satellites into NP different orbital planes is
TD = (NP −1) · TP + TH.
IV. NUMERICAL ANALYSIS
We ﬁrstly analyze the cost for fuel and time deployment to
insert satellites into different planes in each stage, and then
evaluate the performance in the construction period.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2025 at 06:58:31 UTC from IEEE Xplore.  Restrictions apply. 

LIU et al.: DELAY MINIMIZATION FOR PROGRESSIVE CONSTRUCTION OF SATELLITE CONSTELLATION NETWORK
1721
Fig. 3. The results of min schemes with different NP: (a) average STD in each stage for min σ scheme with NP = 1 ∼6; (b) average delay in each stage for min
σ scheme with NP = 1 ∼6; (c) end-to-end delay of each request for min σ scheme with NP = 1 ∼3 during [TL, 8TL), TL = 120 days.
We consider a satellite constellation that eventually consists
of 48 satellites with an even distribution among 8 orbits within
i = 52◦and altitude h = 1410 km [2]. Each satellite could
establish 4 ISLs at most [11]. The time duration of each stage
is the same, namely TL = t2
k −t1
k. There are 8 stages, and in
each stage, 6 satellites will be launched at time t1
k, and provide
relay service for users at time t2
k. Requests arrival follows a
Poisson distribution with λ = 100/h. Source and destination
are uniformly selected among 109 gateways, following the
same geographical distribution as described in [4]. We set TTL
as 24 hours, message size of request as 20 MB, bandwidth of
GSLs as 8 Mbps, and bandwidth of ISLs as 100 Mbps.
During each stage, 6 satellites will be ﬁrstly injected into a
drifting orbit with h = 920 km and i = 52◦, and each satellite
will raise itself into its target position [2]. Since each satellite is
equipped with 100% extra-fuel [12], it is acceptable to achieve
orbit transferring by consuming 5.8% extra-fuel (ISP = 430 s).
Moreover, the time needed to achieve RAAN separation of 45◦
is 57.79 days. As a result, Table I shows the detailed time
deployment and fuel cost.
Supposed that TL is long enough to insert 6 satellites into
6 orbital planes during each stage. Fig. 3(a) show the average
STD in each stage by min σ schemes with NP = 1 ∼6. Be-
cause there are no satellites available in stage 2, using more
planes will reduce the average of STD. As a result, the average
STD will reduce with the increase of NP = 1 ∼6 in stage 2.
After stage 2, more planes are used and more satellites are in-
serted into one plane simultaneously, hence achieving a smaller
average STD. The min schemes with NP = 1 ∼2 mainly insert
satellites into one plane without using more planes, while the
min schemes with NP = 4 ∼6 mainly use more planes without
inserting as many satellites into one plane as possible. However,
the min scheme with NP = 3 could strike a balance between
above two factors. As a result, the average STD of min scheme
with NP = 3 will the minimum among NP = 1 ∼6. Moreover,
the smaller average STD is, the more evenly distributed time
windows on edges between users and satellites can be achieved,
hence yielding lower waiting time, which is the main part of
end-to-end delay. Thus, the pattern of curves within Fig. 3(b) is
similar to that within Fig. 3(a), meaning that the minimization
of the STD of gaps leads to minimization of the delay.
However, time duration between satellite launches is usually
months. Thus, it is reasonable to set TL = 120 days, which
makes NP ≤3. Fig. 3(c) shows the end-to-end delay of each
request generated during [TL, 8TL), where claret squares with
NP = 1 represents a traditional scheme which insert satellites
into the same plane in each stage. With the increase of available
satellites, there are more time windows to forward data. As a
result, end-to-end delays of NP = 1 ∼3 become smaller.
V. CONCLUSION
In this letter, we propose a novel scheme to progressively
construct satellite constellation network. Our scheme inserts
satellites into the positions, that could belong to different orbital
planes. The target positions are at most distributed among
3 orbital planes subject to time deployment constraint. Our
simulation results indicate that, the end-to-end delay with 2 and
3 orbital planes can be reduced by 57.6% and 70.1% in average,
in comparison with the single orbital plane.
REFERENCES
[1] Iridium-Next launch schedule, 2015. [Online]. Available: http://www.
skyrocket.de/space/doc_dat/iridium-next.htm
[2] Globalstar-2 launch schedule, 2010–2015. [Online]. Available: http://
www.skyrocket.de/space/doc_sdat/globalstar-2.htm
[3] Orbcomm-2 launch schedule, 2012–2014. [Online]. Available: http://
www.skyrocket.de/space/doc_sdat/orbcomm-2.htm
[4] C. Hugo et al., “Operator calculus approach to minimal paths: Precom-
puted routing in a store and forward satellite constellation,” in Proc. IEEE
Globalcom, Anaheim, CA, USA, Dec. 2012, pp. 3431–3436.
[5] C. Caini et al., “Application of contact graph routing to LEO satellite DTN
communications,” in Proc. IEEE ICC, Ottawa, ON, Canada, Jun. 2012,
pp. 3301–3305.
[6] W. Ivancic et al., “Experience with Delay-Tolerant Networking from
orbit,” Int. J. Satellite Commun. Netw., vol. 28, no. 5/6, pp. 335–351,
Sep.–Dec. 2010.
[7] I. Psaras et al., “Delay-/disruption-tolerant networking: State of the art
and future challenges,” Univ. Surrey, Surrey, U.K., Tech. Rep., 2010.
[8] C. Arnaund et al., “Time-varying graphs and dynamic networks,” in
Ad-hoc, Mobile, Wireless Netw.
Berlin, Germany:Springer-Verlag, 2011,
pp. 346–359.
[9] S. Jain et al., “Routing in a delay tolerant network,” in Proc. SIGCOMM,
Portland, OR, USA, Aug. 30–Sep. 3, 2004, pp. 145–158.
[10] N. J. Beidleman et al., “Scheme and Apparatus for Deploying a Satellite
Network,” U.S. Patent No. 5 199 672, Apr. 6, 1993.
[11] Z. Liu et al., “Perfect match model based link assignment for optical
satellite network,” Proc. IEEE ICC Sydney, NSW, Australia, Jun. 2014,
pp. 4149–4153.
[12] The Information of Artiﬁcial Satellites 1957–2015. [Online]. Available:
http://www.satlist.nl/
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2025 at 06:58:31 UTC from IEEE Xplore.  Restrictions apply. 

