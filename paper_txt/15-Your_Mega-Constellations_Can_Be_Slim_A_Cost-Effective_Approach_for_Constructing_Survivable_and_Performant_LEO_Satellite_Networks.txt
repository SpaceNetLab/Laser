Your Mega-Constellations Can Be Slim:
A Cost-Effective Approach for Constructing
Survivable and Performant LEO Satellite Networks
Zeqi Lai‡∗, Yibo Wang‡, Hewu Li‡∗, Qian Wu‡∗, Qi Zhang∗, Yunan Hou‡, Jun Liu‡∗, Yuanjie Li‡∗
‡Institute for Network Sciences and Cyberspace, Tsinghua University, ∗Zhongguancun Laboratory
Abstract—Recently we have witnessed the active deployment
of mega-constellations with hundreds to thousands of low-earth
orbit (LEO) satellites, targeting at constructing LEO satellite
networks (LSN) to provide ubiquitous Internet services globally.
However, while the massive deployment of LEO satellites can
improve the network survivability and performance of an LSN,
it also involves additional sustainable challenges such as higher
deployment cost, risk of satellite conjunction and space debris.
In this paper, we investigate an important research problem
facing the upcoming satellite Internet: from a network perspective,
how many satellites exactly do we need to construct a survivable and
performant LSN? To answer this question, we first formulate the
survivable and performant LSN design (SPLD) problem, which
aims to find the minimum number of needed satellites to construct
an LSN that can provide sufficient amount of redundant paths,
required link capacity and acceptable latency for traffic carried
by the LSN. Second, to efficiently solve the tricky SPLD problem,
we propose MEGAREDUCE, a requirement-driven constellation
optimization mechanism, which can calculate feasible solutions
for SPLD in polynomial time. Finally, we conduct extensive trace-
driven simulations to verify MEGAREDUCE’s cost-effectiveness in
constructing survivable and performant LSNs on demand, and
showcase how MEGAREDUCE can help optimize the incremental
deployment and long-term maintenance of future satellite Internet.
I. INTRODUCTION
Thanks to innovative breakthroughs in today’s rocket in-
dustry and satellite communication technologies, low-earth
orbit (LEO) broadband satellites are greatly expanding the
Internet frontier in recent years, propelling us into a new era
of satellite Internet. “NewSpace” rising stars such as SpaceX’s
Starlink, OneWeb, Telesat and Amazon’s Project Kuiper have
taken center stage in constructing large-scale LEO satellite
networks (LSN) upon mega-constellations which will consist of
hundreds to thousands of inter-connected satellites, promising
global Internet coverage on an unprecedented scale.
Since most emerging LSNs upon mega-constellations are
still in plan or under heavy development, making an appropriate
network design, which determines the required amount of LEO
satellites and connectivity configurations of an LSN, should be
very critical for satellite operators. However, although “mega-
constellation” conceptually refers to a large number of satellites,
“from a network perspective, how many LEO satellites exactly
does an LSN need”, still remains an important but unclear
problem facing the upcoming era of satellite Internet.
We observed two important trends related to LSN design.
On the one hand, leading players such as SpaceX and Amazon
plan to deploy their mega-constellations with a significantly
large number of LEO satellites. For example, the first phase of
SpaceX’s Starlink and Amazon’s Kuiper Project will consist of
about 4,408 and 3,236 LEO satellites respectively. In addition,
SpaceX also expects to extend the constellation size of Starlink
to 42,000 in its next deployment phase. The key network
benefits of deploying more satellites in an LSN mainly include:
• Better survivability. Nodes and links in an LSN inevitably
suffer from failures due to a series of complex factors
such as solar storm [1], radiation interference and hardware
malfunctions [2]. Deploying more satellites in an LSN can
effectively improve the survivability of the network since it
provides more redundant backup links and paths.
• Better performance. LSNs target at providing broadband
network services for global terrestrial customers. Deploying
more LEO satellites with multiple high-throughput spot
beams [3] can enable broader service coverage as well as
higher constellation-wide network capacity [4].
On the other hand, despite the network benefits, some recent
voices have also pointed out that the high density of mega-
constellations can involve extra sustainable problems such as:
• Higher costs. Undoubtedly, more satellites in an LSN indi-
cate higher costs for satellite deployment and maintenance.
Therefore, besides well-funded giant companies like SpaceX
and Amazon, some other organizations are exploring viable
paths to wisely design constellations with much less number
of satellites (e.g., IRIS2 [5] and Sfera [6] constellation).
• Governance issues (e.g., space conjunction and debris). As
the constellation density increases, spacecraft conjunction
incidents could become more frequent. More satellites can
also lead to an increased accumulation of space debris which
is a significant concern for space agencies and satellite
operators as it poses a big risk to operational LSNs [7].
The academia has many previous efforts related to the
LSN design (or constellation design) from different aspects.
As this paper will introduce in detail in §II, some works
focused on designing a satellite network (or a constellation)
to optimize the communication coverage [8], [9], delay [10],
or network capacity [11], [12]. However, these LSN design
approaches did not consider guaranteeing network survivability
under various potential fallible elements in space. Some other
works systematically studied the survivable network design
problem [13], [14], [15] in conventional static terrestrial
telecommunication networks, but it is difficult to directly apply
979-8-3503-8350-8/24/$31.00 ©2024 IEEE
521
IEEE INFOCOM 2024 - IEEE Conference on Computer Communications | 979-8-3503-8350-8/24/$31.00 ©2024 IEEE | DOI: 10.1109/INFOCOM52122.2024.10621083
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

them in emerging LSNs where the entire network backbone
is highly dynamic. More recently, some researchers propose
multi-tier space network design [16], [7] which incorporates
geostationary (GEO) satellites to forward inter-LEO-satellite
traffic and reduce the amount of required satellites. However,
integrating GEO satellites may inevitably increase the network
delay due to the higher orbit altitude, and GEO satellites
typically have limited capacity to serve a significantly large
number of broadband users. Collectively, we argue that the
network community still lacks a systematical and effective
approach to guide the design, deployment and maintenance of
future LSNs from multiple network aspects including network
survivability, performance and corresponding costs.
In this paper, we fill this gap by conducting a comprehensive
study on the LSN design problem from a network perspective.
Specifically, we explore the research problem: given the
requirements on network survivability and performance, how
should a satellite operator design the LSN to satisfy various
requirements with the minimum number of satellites? We carry
out our study and make three contributions as follows.
First, we formulate the survivable and performant LSN
design (SPLD) problem, which aims to find the minimum
number of required satellites in an LSN, while simultaneously
satisfying various survivability and performance requirements
such as: sufficient amount of redundant paths, necessary link
capacity, and acceptable end-to-end delay for any terrestrial
communication pair. Second, to solve the tricky SPLD problem
efficiently and effectively, we propose MEGAREDUCE, a
requirement-driven LSN optimization mechanism which can
design an LSN in polynomial time, satisfying the survivability
and performance requirements.
As the third contribution of this paper, we verify the cost-
effectiveness of MEGAREDUCE on constructing survivable and
performant LSNs on demands. Extensive evaluations driven
by real-world constellation information and satellite trajectory
demonstrate that MEGAREDUCE can effectively optimize the
number of required LEO satellites, without invalidating both
survivability and performance requirements. We also showcase
the value of MEGAREDUCE in several crucial stages during the
LSN deployment and operation, such as facilitating resilient
constellation design, optimizing the partial LSN deployment
and providing insights for constellation maintenance.
II. BACKGROUND AND RELATED WORK
A. Preliminaries for LEO Satellite Networks (LSN)
LSN architecture. Figure 1 plots a typical architecture of
emerging LEO satellite networks (LSN). Communication satel-
lites can be equipped with high-speed inter-satellite links (ISLs)
and ground-satellite links (GSLs) to construct an LSN, and
then be integrated with terrestrial network infrastructures to
provide ubiquitous, low-latency Internet services for various
users. The earth surface is divided into a large number of
cells, and emerging broadband satellites leverage multiple high-
throughput spot beams to serve users spread in geo-distributed
cells. In this architecture, LEO satellites perform two critical
functions. First, these satellites work as space routers to build an
Multiple 
spot 
beams
Broadband Satellites equipped with inter-satellite laser links
Cell
Ground 
Station
Internet
Server
Terrestrial 
Cell
Fibers
…
…
Various
Users
Fig. 1: Typical architecture of LEO satellite networks (LSN).
“Internet backbone in space” [17] and forward network traffic
between any two cells especially for long-haul communications.
Second, they also work as satellite ingresses to provide last-mile
network connectivity for terrestrial users and ground stations.
“Mega” Internet constellations. Unlike their predecessors (e.g.,
Iridium [18]), emerging satellite Internet constellations have
grown dramatically in their density. SpaceX’s Starlink is
currently the most widely used commercial satellite Internet
constellation. As of the date of June 2023, Starlink has launched
more than 4000 LEO satellites and provided services for more
than 1.5 million subscribers around the world [19]. Many other
companies or organizations are also actively deploying their
mega-constellations with thousands of LEO satellites, such
as OneWeb [20], TeleSat [21], and Amazon’s Kuiper [22],
with different constellation parameters (e.g., orbit altitude and
inclination) but the same target (i.e., global Internet services).
B. LSN Requirements: From A Network Design Perspective
Since most LSNs are still under heavy development, making
a proper LSN design in advance should be very crucial for
satellite Internet operators. From a network design perspective,
we generalize three important requirements for future LSNs.
Network survivability. Typically, network survivability refers
to the ability of the network to maintain an acceptable level
of service during various network failures. Note that unlike
existing terrestrial networks where the core backbone is usually
deployed in a protected environment, space routers in an LSN
are operated in a failure-prone space environment, and thus are
susceptible to various types of inferences or even malfunctions
which are likely to cause network node or link failures. In
addition, recent LEO broadband constellations are based on
small satellites, which reduce their manufacturing time, but
are relatively short-lived and prone to failure [23], [2], [1].
Therefore, LSNs are expected to be survivable and resilient to
failures and malfunctions in the complex space environment.
Low latency and high capacity. Fundamentally, emerging
LSNs are designed to provide Internet services for global users.
For example, as plotted in Figure 1, a terrestrial user in remote
or rural area can use the LSN to visit an Internet content
server (e.g., a Web server), or communicate with other LSN
users. Therefore, in addition to network survivability, LSNs
are also expected to provide performance guarantee such as
acceptable latency and sufficient capacity to accomplish good
quality of experience (QoE) for various Internet applications.
522
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

Appropriate scale. The number of required satellites in a
mega-constellation needs to be carefully considered since it
affects the total cost of an LSN, which not only explicitly
refers to the economic cost involved by the production and
operation of a large number of satellites, but also implicitly
indicates the orbit and radio spectrum occupation required by
these communication satellites. In addition, recent works [7],
[24], [25] have also pointed out that blindly increasing the
number of satellites in a mega-constellation can incur a series
of sustainable problems such as satellite conjunctions and
space debris with serious security risks, light pollution, radio
frequency interference and regulatory challenges.
The above network requirements suggest two diametrically
opposed optimization directions for future LSN design. On the
one hand, to improve the survivability and performance, an
LSN should deploy more satellites to enhance network capacity
and build adequate redundant paths for any communication pair
to facilitate fast network recovery in case of various failures. On
the other hand, to reduce the cost and avoid serious sustainable
issues, it is expected to reasonably deploy fewer satellites. From
a network perspective, how should an LSN operator judiciously
design, deploy and maintain its LSN?
C. Related Work
Many previous works have investigated problems related to
LSN design. We classify them into the following categories.
LSN (constellation) design. The satellite network and com-
munication community has a long history studying on the
constellation design for satellite communication systems. In the
early stage, many constellation patterns were proposed [26], [8],
[27] to achieve global coverage, but they can only satisfy basic
communication needs such as low-rate data communication for
short message or voice services. More recently, various works
have studied different aspects considered for satellite Internet
mega-constellation deployments [28], [10], [12], [11]. For
example, Deng et al. proposed an ultra-dense LEO constellation
architecture, which minimizes the number of satellites while
satisfying the backhaul requirement of each user terminal [12].
Motif [11] is a new LSN topology design, exploiting repetitive
patterns in the network to avoid expensive link changes over
time, while still providing acceptable latencies and throughput.
However, those approaches mostly focus on optimizing the
coverage or quality of services (QoS) of the LSN, but they
ignore the joint requirements on network survivability and cost.
Survivable network design. Over the past decades, the
network community has a number of works studying on the
survivable network design problem (SND) in conventional
telecommunication networks. The original SDNP is to find a
minimum cost subgraph satisfying various connectivity, hop,
and performance requirements between network nodes. This
leads to a wide variety of classical problems such as minimum
cost flow and steiner tree etc. Notable efforts related to this
area of research include Jain’s 2-approximation algorithm for
the edge-connectivity SDNP [29], together with its various
variants with additional constraints [30], [15], [31], [29], [14],
[32], [33]. However, all those existing SDNP solutions are
designed for conventional networks where network nodes and
links are static. They are difficult to be directly applied into
emerging LSNs where the entire space backbone suffers from
infrastructure-level frequent and endless dynamics.
Hybrid optimization.
There are some other recent works
that propose to use a multi-tier, hybrid constellation design
for satellite Internet [7], [16], [34], [35]. The core idea of
these works is to use geostationary (GEO) satellites with wider
coverage to replace a portion of LEO satellites and thus reduce
the total number of satellites. However, involving GEO satellites
suffers from a fundamental limitation that, due to the higher
orbit altitude and limited network capacity, it may result in
higher user-perceived latency and reduced network scalability
when serving a large amount of terrestrial customers. Besides, it
also requires extra complicated negotiations and collaborations
between different GEO and LEO satellite operators. Therefore,
in this paper we focus on LSN design for a single operator.
Routing in LSNs. Ultimately realizing high survivability
and performance in an LSN requires the collaboration of
both network design and routing techniques. In practice,
to cope with various network failures, a survivable LSN
design should provide sufficient redundant paths for high-value
communication pairs. When a failure occurs, routing protocols
should quickly detect the failure, update the routing table and
forward traffic via other survival redundant paths to maintain
the end-to-end reachability. Many previous efforts have studied
efficient and resilient routing in LSNs (e.g., [36], [37], [38],
[39]) and they complement our work in this paper.
Collectively, the limitations of existing network design efforts
motivate us to discover a new cost-effective approach to guide
satellite operators to design survivable and performant LSNs.
III. SYSTEM MODELS AND PROBLEM STATEMENT
A. System Models
We start our quest by first introducing our system models
based on the basic LSN architecture illustrated in Figure 1.
Constellation network model. Let S = {s1, s2, s3, ...} denote
the set of all LEO satellites in an LSN. As described in
§II, these broadband satellites communicate with ground
facilities (e.g., ground stations and user terminals) by radio
GSLs. Recall that emerging satellite communication systems
divide the earth surface into multiple cells (e.g., by the well-
know H3 method [40] in practice) and each cell can be covered
by spot beams to build bi-directional communication links.
Thus, we aggregate ground facilities into cells, and denote
C = {c1, c2, c3, ...} as the set of all cells served by the LSN.
LEO satellites are moving at a high velocity related to the
earth. To model the impact of LEO dynamics on the network
topology, we assume time is slotted, and denote a binary value
It
ij to indicate whether node i and j are visible to each other
in slot t. Further, let binary value et
ij = 1 indicate that there
exists an active communication link between node i and j in
slot t. Obliviously a communication link can be activated only
if its two communication ends are visible to each other.
Thus, an LSN can be formulated by a time-varying graph
Gt = (V, Et), where the vertex set V = S ∪C, and the edge
523
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

set Et includes all active many-to-many GSLs and ISLs in
slot t. The time-varying connectivity reflected by edge set Et
characterizes the LEO dynamics in the LSN.
Capacity model. Emerging broadband satellites leverage
multiple high-throughput spot beams to serve terrestrial users.
These spot beams share the overall uplink/downlink capacity
of the satellite [3]. We assume that one spot beam can serve
one terrestrial cell. The uplink/downlink capacity of the spot
beam between satellite i and cell j in slot t is denoted as
Capt
ji and Capt
ij (i ∈S, j ∈C) respectively. Let Capmax
up
(Capmax
down) denote the maximum uplink (downlink) capacity
of a satellite, which is typically constrained by the power
supplement of the satellite in practice. Then the real-time uplink
(downlink) capacity of a certain satellite i can be calculated
as: P
j∈C et
ji · Capt
ji (P
j∈C et
ij · Capt
ij). Similarly, the total
achievable uplink (downlink) capacity of a cell j in a certain slot
t can be calculated as: P
i∈S et
ji · Capt
ji (P
i∈S et
ij · Capt
ij).
Although laser ISLs also have capacity limitations, according to
recent references [4], the capacity of laser ISLs is much higher
than that of radio GSLs, and ISLs are unlikely to be the bottle-
neck in LSNs with existing space traffic steering (e.g., [38]).
Communication demands. Let D = {d1, d2, d3, ...} denote
the set of all communication demands. Each dk ∈D is
associated with a triplet (src(dk), dst(dk), size(dk)), where
src(dk), dst(dk) ∈C are the two communication ends (i.e., the
source and destination cell) of dk, and size(dk) is the traffic
volume (e.g., datarate) of the demand. In practice, a concrete
communication demand can be a video conferencing traffic or
Web request/response carried by the LSN.
Survivability requirements. For any demand d associating
with two distinct nodes src(d) = i and dst(d) = j, an [i →j]
path represents a sequence of nodes and edges in the LSN
graph. There might be multiple available paths for a demand
d, and we denote a collection of [i →j] as edge-disjoint paths
if no edge appears in more than one path. Further, we call d
associating with i, j is R-edge connected if there are at least
R edge-disjoint paths between i and j in all time slots.
The number of edge-disjoint paths for a demand inherently
indicates the LSN’s ability to guarantee survivable commu-
nication for this demand. Let rij denote the survivability
requirement for demand d associating with communication pair
(i, j), where i and j are two distinct terrestrial cells (i, j ∈C).
rij is assumed to be symmetric, i.e., rij = rji. Specifically, re-
quirement rij indicates that it requires at least rij edge-disjoint
paths between i and j in all time slots. Intuitively, a higher
rij indicates more redundant paths, and the communication
session between i and j can resist against more link failures.
B. Basic Survivable and Performant LSN Design (SPLD)
With all the system models defined above, we define the
survivable and performant LSN design (SPLD) problem: given
an original LSN upon a mega-constellation, together with a
series of survivability and performance requirements, how to
appropriately optimize the network structure and find a sub-
graph satisfying all requirements with the minimum amount
of satellites? Specifically, we define x(i) as a binary variable
indicating whether a satellite i ∈S is included or not in the
sub-graph, and T refers to the set of all time slots. Then the
SPLD problem can be formulated as follows.
Objective: min P
i∈S x(i),
Subject to:
It
ij ≥et
ij, ∀i, j ∈S ∪C, i ̸= j, ∀t ∈T,
(1)
x(i) · x(j) ≥et
ij, ∀i, j ∈S ∪C, i ̸= j, ∀t ∈T,
(2)
X
j∈S
et
ij ≤NISL, ∀i ∈S, i ̸= j, ∀t ∈T,
(3)
X
∀d:src(d)=j
size(d) ≤
X
i∈S
et
ji · Capt
ji, ∀j ∈C, ∀t ∈T,
(4)
X
∀d:dst(d)=j
size(d) ≤
X
i∈S
et
ij · Capt
ij, ∀j ∈C, ∀t ∈T,
(5)
X
j∈C
et
ji · Capt
ji ≤Capmax
up , ∀i ∈S, ∀t ∈T,
(6)
X
j∈C
et
ij · Capt
ij ≤Capmax
down, ∀i ∈S, ∀t ∈T,
(7)
X
(i,j)∈σ(V )
et
ij ≥max∀p∈V −V ,∀q∈V rpq, ∀V ⊂V, V ̸= ∅.
(8)
Constraint (1) indicates that two communication ends can
establish a link between them only if they are visible and
connectable to each other. Constraint (2) ensures that commu-
nication links can only be established if the associated satellites
are included in the sub-graph. Constraint (3) indicates that for
each satellite the total amount of activated ISLs can not exceed
the number of available transmitters (NISL). Constraint (4)
and (5) guarantee the capacity requirement in both uplink and
downlink directions for different traffic demands associated
with geo-distributed cells. Constraint (6) and (7) describe the
GSL capacity limitation on each satellite.
The survivability requirements for communication demands
are guaranteed by constraint (8). V is a subset of the vertex set
V , and σ(V ) represents the set of edges connecting V from
V . This constraint ensures that the value of a minimum cut
separating p and q is at least rpq, implying that there are at
least rpq edge-disjoint paths between the pair (p, q).
C. Extending SPLD with Delay Constraints
The above basic SPLD formulation guarantees rij-edge
connected for communication demand associated with i, j.
However, in a practice, survivable redundant paths are also
expected to satisfy certain delay requirements, i.e., the length
of these rij edge-disjoint paths should not exceed a certain
threshold to guarantee acceptable end-to-end delay. Therefore,
we extend the basic SPLD with delay (length) constraints.
Graph transformation. To formulate the delay-constrained
SPLD, we convert the original non-directed Gt to a directed
layered graph. We then decompose the basic SPLD problem
into |D| subproblems, one for each demand. Assume the path
length of demand d associated with i and j is expected to
524
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

Orbit 1
Orbit 2
S11
S12
S13
S21
S22
S23
src
dst
(a) The original LSN graph with a communication pair (src, dst).
src
𝑽𝟏
𝒅
S11
S12
S13
S21
S22
S23
dst
𝑽𝟑
𝒅
S11
S12
S13
S21
S22
S23
dst
𝑽𝟐
𝒅
S11
S12
S13
S21
S22
S23
dst
𝑽𝟒
𝒅
S11
S12
S13
S21
S22
S23
dst
𝑽𝟓
𝒅
dst
𝑽𝟔
𝒅
(b) Convert the original graph to a directed layered graph representation.
Fig. 2: The original network structure with two orbits and six satellites in total, and its layered presentation when L = 5.
be lower than Ld (or denoted by Lij) . Inspired by [41], the
value of Ld can be set to ⌈λ · Lsp
ij ⌉where Lsp
ij is the shortest
path length between i and j, and λ ≥1 is a constraint factor.
Further, we model each subproblem associated with demand d
by a directed graph composed of Ld + 1 layers.
Based on the graph Gt = (V, Et), we create a directed
layered graph Gd
t = (V d, Ed
t ) for each d, where V d = V d
1 ∪
V d
2 ∪...∪V d
Ld+1. We define V d
1 = {src(d)}, V d
Ld+1 = {dst(d)},
and V d
l = V −{src(d)} for l = 2, ..., Ld. Let vd
l be the copy
of v ∈V in the l-th layer of graph Gd
t . Then, the edge set of
Gd
t is defined as Ed
t = {(id
l , jd
l+1)|(i, j) ∈Et, id
l ∈V d
l , jd
l+1 ∈
V d
l+1, l ∈1, ..., Ld} ∪{(dst(d)l, dst(d)l+1)|l ∈{2, ..., Ld}}.
For simplicity, we define the directed edge between id ∈V d
l
and jd
l+1 ∈V d
l+1 by (i, j, l), where d is omitted in the notation
as it is often clear from the context. Each edge can carry
at most one unit of flow and let Capd
t (i, j) denote the link
capacity of edge (i, j) in Gd
t .
Assume a simplified LSN scenario as plotted in Figure 2a.
This LSN contains two ground stations, two evenly spaced
orbits and six satellites in total. Each satellite has three
ISLs (i.e., NISL = 3). A communication demand associates
with src and dst. Each ground station has two visible ingress
satellites at this time. Assume our goal is to find a minimal
subgraph with at least 2 edge-disjoint paths for (src, dst) (i.e.,
rsrc,dst = 2), and the path length should not exceed five
hops (i.e., Lsrc,dst = 5). Then we build a directed layered
graph for the original undirected graph as plotted in Figure 2b.
For each node except for src, we create a copy of the node
from layer 2 to 5. For each edge (i, j) in the original graph,
we create a directed edge for their corresponding copies among
different layers. By this transformation, we guarantee that any
path from src to dst satisfies the L-hop constraint (L=5).
Upon the transformed layered graph Gd
t = (V d, Ed
t ), we
then formulate the delay-constrained SPLD problem as follows.
Objective: min P
i∈S x(i),
Subject to:
X
∀j:(j,i,l−1)∈Ed
t
ω(l−1)d
ji
−
X
∀j:(i,j,l)∈Ed
t
ωld
ij
=





−rd,
if
i = src(d)
rd,
if
i = dst(d)l
0,
otherwise
,
(9)
∀(i, j) ∈Et
d(i ̸= j), l ∈{1, ..., Ld + 1}, d ∈D, t ∈T,
ωld
ij + ω(l+1)d
ji
≤1, ∀(i, j) ∈Et, d ∈D, t ∈T,
(10)
X
l∈{2,...,Ld}
ωld
ij ≤x(i), ∀(i, j) ∈Et, d ∈D, i ∈S, t ∈T,
(11)
size(d) ≤
X
∀j∈V d
ωLdd
j,dst(d)L+1 · Capd
t (j, dst(d)L+1), and
(12)
size(d) ≤
X
∀j∈V d
ω1d
src(d),j · Capd
t (src(d), j), ∀d ∈D, t ∈T.
Each binary variable ωld
ij ∈{0, 1} describes whether the
edge (i, j, l) can carry flow for demand d in the layered graph
Gd
t . Note that ωld
ij = 0 if l = 0. Let rd denote the survivability
requirement for d. Constraint (9) is the flow conservation
constraints at every node of the layered graph that guarantee that
rd units of flows go from src(d) to dst(d), and it also ensures
the rd survivability. Constraint (10) avoids local flow loops.
Moreover, constraint (11) guarantees that edges associated with
i can be established to carry traffic only if i is included in the
sub-graph, and guarantees the edge-disjointness of the paths.
Constraint (12) indicates the link capacity requirement for each
demand.
The solution space of the integer programming formulation of
our basic and delay-constrained SPLD problem is intractable for
exhaustive search. Even if we set all r to 1, the SPLD problem
in a single time slot can be converted to the classic Steiner
Tree Problem which is known to be NP-hard. Our preliminary
results show that the problem becomes intractable to solve
even for moderately-sized instances with hundreds of satellites.
Hence solving the SPLD problem requires the development of
more efficient methods to obtain feasible solutions.
IV. REQUIREMENT-DRIVEN LSN OPTIMIZATION
A. MEGAREDUCE Overview
MEGAREDUCE exploits a basic idea that: while it is difficult
to directly solve the SPLD problem and obtain the optimal
solution, it is doable to determine whether a given LSN is
feasible to meet survivability and performance requirements in
polynomial time. Specifically, MEGAREDUCE starts with an
initial constellation state, then repeatedly tunes the constellation
structure as well as the number of satellites in multiple rounds
of iterations, and searches the feasible LSN design with the
minimum number of satellites.
525
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

Feasibility 
Checker
Solution 
Searcher
Initial
Constellation
Constellation 
Tuner
Feasible
Or NOT
Solution
Obtain Reward
∆ survivability ↓↑
∆delay ↓↑
∆ capacity ↓↑
Tunning Action
↓ Shrink constellation
↑ Expand constellation
Min{#Sat}
Fig. 3: High-level workflow of MEGAREDUCE optimization.
Specifically, MEGAREDUCE exploits the following steps to
find a near-optimal LSN design satisfying various requirements.
• (1) Constellation initialization. As illustrated in Figure 3,
MEGAREDUCE starts with an initial constellation pattern.
This start point can be configured by a satellite operator, e.g.,
using their current constellation design.
• (2) Feasibility checking. Based on the initial constellation,
MEGAREDUCE then exploits an efficient feasibility checking
process to examine whether the current state of the constella-
tion can satisfy survivability and performance requirements.
• (3) Constellation tuning. Based on the feasibility checking
results, MEGAREDUCE conducts constellation tuning to
update the LSN design. If the current constellation is a
feasible one (i.e., can satisfy the survivability and perfor-
mance requirements), we use a Shrink method to slightly
reduce the amount of satellites. Otherwise, we invoke an
Expand function to increase the density of the constellation.
• (4) Solution search. Finally, MEGAREDUCE iteratively
repeats the feasibility checking and constellation tuning
process. Among all feasible LSN designs, MEGAREDUCE
outputs the one with the minimal number of satellites.
B. Searching LSN Design Solutions
At a high-level, MEGAREDUCE searches the optimized LSN
design as follows. First, it calculates the search range of the
number of required satellites based on the orbital information.
Second, it iteratively searches “feasible points” within this
range. Finally, it chooses the feasible constellation configuration
with the minimum number of satellites as the output decision.
Orbital characteristics. In addition to the network constella-
tion model described in §III-A, a satellite constellation can also
be modeled by its orbital characteristics. For example, emerging
Internet constellations (e.g., Starlink and Kuiper) follow the
classic Walker Delta Constellation [42], which contains a group
of evenly-spaced orbits with the same inclination and altitude,
and satellites in each orbit are also evenly spaced. This kind
of constellations has an associated notation [Inc, O, M, H],
where Inc is the orbit inclination, O is the number of equally
spaced planes, M is the total number of satellites in each
orbit plane, and H is the relative spacing between satellites
and adjacent planes. These orbital information can assist us to
narrow down the search range of feasible solutions.
Determining the searching range. MEGAREDUCE searches
the minimum number of required satellites in a range denoted as
[Nmin, Nmax]. Initially, Nmax is set to the number of satellites
in the original constellation. We calculate the initial Nmin by
exploiting a key insight that: to guarantee at least rij disjoint
paths for communication pair between cell i and j, there should
Algorithm 1: Searching Process of MEGAREDUCE.
Input: LSN graph G = {Gt}, demand set D, survivability
requirement R = {rij}, delay requirement L = {Lij};
Output: A simplified LSN based on {xi};
1: Nmin ←GetSurvivableBound(G, {rij}, D);
2: Nmax ←|V |, I ←0; /* iteration counter. */
3: Gresult
list
←∅, [O, M, H] ←GetConsInfo(G);
4: while I ≤Ilimit do: /* search the feasible solution. */
5:
/* call Algorithm 2 to check the current feasibility. */
6:
feasible ←FesibilityCheck(G, D, R, L);
7:
if feasible == True do:
8:
Nmax ←G.O · G.M, Gresult
list
.append(G);
9:
G ←Shrink(G, Nmin), I ←I + 1;
10:
else:
11:
Nmin ←G.O · G.M;
12:
G ←Expand(G, Nmax), I ←I + 1;
13:
end if
14: end while
15: return G ←argmin∀G∈Gresult
list
(|G.O · G.M|).
be at least rij visible satellites for i and j. Hence, the initial
Nmin is calculated as the minimum number of satellites that
ensures each cell i has at least max{rij}, ∀j ∈C satellites in
their transmission range during the service hours.
Searching process. Algorithm 1 illustrates the details of
MEGAREDUCE’s searching process. Initially, MEGAREDUCE
invokes the GetSurvivableBound function to obtain the
minimum number of satellites which describes the lower bound
of the survivability requirement (line 1-3). This guarantees that
there are at least rij visible satellites for cell i and j. Iteratively,
MEGAREDUCE searches the feasible constellations within
[Nmin, Nmax] by calling the FeasibilityCheck function.
If a feasible constellation is found, then it calls Shrink to
slightly reduce the constellation density. Otherwise, it calls
Expand to increase the number of satellites (line 4-14). Here
we define a threshold Ilimit which constrains the maximum
number of iterations. Finally, the feasible solution with the
minimum number of satellites is selected as the result (line
15). We next introduce the details of FeasibilityCheck
and constellation tuning functions (Shrink and Expand).
C. Feasibility Checking
Given an LSN described by a time-varying graph, the
feasibility checking process determines whether the current
LSN design can satisfy the survivability and performance
requirements, as described in Algorithm 2. First, based on the
constellation information, the feasibility checker calculates the
available uplink/downlink capacity for each terrestrial cell (line
3-6). Second, for each demand d, the checker transforms the
constellation graph to an extended layered graph based on the
methodology introduced in §III-C (line 9). Specifically, assume
that the source and destination cell of demand d are src(d)
and dst(d). Note that here we set the delay requirement for d
as Lsrc(d),dst(d) = λ · LSP
src(d),dst(d), where LSP
src(d),dst(d) is the
shortest path between src(d) and dst(d) in the LSN.
526
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

Algorithm 2: FeasibilityCheck Process.
Input: LSN graph G = {Gt}, demand set D, survivability
requirement R = {rij}, delay requirement L = {Lij};
Output: Feasibility decision F;
1: F ←True; /* feasibility initialization. */
2: for each t in T do: /* check for each time slot. */
3:
for each j in C do: /* initialize capacity. */
4:
AvaiCapup
j
←P
i∈S et
ji · Capt
ji;
5:
AvaiCapdown
j
←P
i∈S et
ij · Capt
ij;
6:
end for
7:
for each d in D do: /* check for each demand. */
8:
/* Create a delay-constrained layered graph. */
9:
Gd
t ←GraphTransform(d, Gt) /* (§III-C). */;
10:
/* Check for survivability. */
11:
r ←CalculateMaxFlow(src(d), dst(d), Gd
t );
12:
if r < rsrc(d),dst(d), return F ←False;
13:
s ←size(d);/* Check communication capacity. */
14:
if s ≤AvaiCapup
src(d) and s ≤AvaiCapdown
dst(d) do:
15:
AvaiCapup
src(d) ←AvaiCapup
src(d) −s;
16:
AvaiCapdown
dst(d) ←AvaiCapdown
dst(d) −s;
17:
else: return F ←False; end if;
18:
end for /* end of each demand check. */
19: end for /* end of each time slot check. */
20: return F. /* find a feasible constellation state. */
Further, the algorithm checks whether the current network
can satisfy the survivability requirement (line 11-12). Given
the demand d with the survivability requirement rsrc(d),dst(d),
CalculateMaxFlow computes the maximum number of
flows from src(d) to dst(d). The LSN graph can meet the
survivability requirement only if the maximum number of
flows from src(d) to dst(d) is at least rsrc(d),dst(d). Finally,
the feasibility checker examines whether the remaining up-
link/downlink capacity for cell src(d) and dst(d) are sufficient
to carry the traffic demand of d (line 14-17), and outputs the
feasibility result of the given constellation state.
D. Constellation Tuning
Based on the feasibility result, MEGAREDUCE then performs
operations to tune the constellation configuration. Intuitively
MEGAREDUCE’s tuning process slightly shrinks the satellite
density if a feasible configuration is found, or expands the
constellation population in a reasonable way if its current form
can not satisfy various requirements.
The design details of the Shrink() and Expand() functions
are illustrated in Algorithm 3. Specifically, these functions
perform binary search in [Nmin, Nmax]. Note that to shrink (ex-
pand) a constellation, one can reduce (increase) the number
of orbits or reduce (increase) the number of satellites in each
orbit. Here our tuning algorithms tune the constellation to
make O and M closer (line 3-7 and line 10-14). This principle
comes from an important insight from the widely used Walker
Delta constellations that the maximum number of hops of the
shortest path between any two communication satellites is
⌈(O+M)/2⌉, which obtains its minimum value when O = M.
Algorithm 3: Constellation Tuning Algorithms.
Expand: (dynamic graph G, upper bound Nmax)
1: current N ←G.O · G.M;
2: target N ←⌊(current N+Nmax)
2
⌋;
3: if G.O ≤G.M do:
4:
add ⌊(target N−current N)
G.M
⌋orbits in total;
5: else:
6:
add ⌊(target N−current N)
G.O
⌋satellites per orbit;
7: end if
Shrink: (dynamic graph G, lower bound Nmin)
8: current N ←G.O · G.M;
9: target N ←⌊(current N−Nmin)
2
⌋;
10: if G.O ≤G.M do:
11:
reduce ⌊(current N−target N)
G.O
⌋satellites per orbit;
12: else:
13:
reduce ⌊(current N−target N)
G.M
⌋orbits in total;
14: end if
In other words, since Nmin guarantees the lower bound of
survivability, making O and M closer can decrease the upper
bound of delay between any communication pair in the LSN.
V. EVALUATION
A. Experiment Setup
(1) LSN simulator. Because most emerging LSNs are still
under deployment or just provide limited accessibility, we
evaluate MEGAREDUCE by LSN simulation. To build a
trace-driven simulation environment, we collect constellation
information from the public regulatory documents [43], [44],
and extend StarPerf [45], a state-of-the-art LSN simulator
which can mimic the LEO dynamics and network behaviors
of an LSN. Specifically, we extend StarPerf with the ability
of flexibly tuning the constellation structure as well as the
ability for survivability assessment. We set the ground station
distribution based on the public information provided by [46].
Further, we follow a recent study [47] to set the capacity of
each laser ISL to 20Gbps, set the capacity of each shared
GSL to 4Gbps, and set NISL = 4 in our experiment. For each
experiment in this section, we simulate a complete regression
period for the evaluated constellation. Upon the LSN simulator,
we implement our MEGAREDUCE optimizer based on two
open libraries: Gurobi [48] and SkyField [49], which is
an astronomy package for high precision research-grade orbit
analysis and trajectory calculation.
(2) Traffic demand generation. We combine Starlink’s
availability map [50] and a recent population-based traffic
model used in [11] to generate the LSN traffic demand matrix
in our experiments. Specifically, we generate the traffic demand
for each terrestrial cell where satellite service is ready based on
the availability map, and the traffic volume is set proportional
to its population size which can be obtained from [51].
B. Optimizing LSN Designs under Various Requirements
We first verify
MEGAREDUCE’s ability to optimize
LSN designs under various requirements. Specifically, we
527
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

0
1000
2000
3000
4000
5000
2
3
4
5
6
# of Required Satellites
Starlink
MegaReduce
Survivability(𝒓𝒓𝒎𝒎𝒎𝒎𝒎𝒎)
(a) Starlink optimization.
0
500
1000
1500
2000
2500
3000
3500
2
3
4
5
6
# of Required Satellites
Kuiper
MegaReduce
Survivability(𝒓𝒓𝒎𝒎𝒎𝒎𝒎𝒎)
(b) Kuiper optimization.
Fig. 4: Required # of satellites v.s. survivability requirements.
0
1000
2000
3000
4000
5000
20
25
30
35
40
# of Required Satellites
Starlink
MegaReduce
Per-cell Capacity Requirement(Mbps)
(a) Starlink optimization.
0
500
1000
1500
2000
2500
3000
3500
20
25
30
35
40
# of Required Satellites
Kuiper
MegaReduce
Per-cell Capacity Requirement(Mbps)
(b) Kuiper optimization.
Fig. 5: Required # of satellites v.s. capacity requirements.
use MEGAREDUCE to optimize two commercial mega-
constellations Starlink and Kuiper. In particular, we use the first
phase of Starlink (4408 LEO satellites in 5 orbital shells with
the altitudes between 540 km and 570 km) and Kuiper (3236
satellites in total) as the initial constellation configuration.
Figure 4 plots MEGAREDUCE’s optimization on Starlink
and Kuiper under various survivability requirements. Here
the survivability parameter rmin indicates that there should
be at least rmin edge-disjoint paths in the network for all
communication pair in all time slots. The results in Figure 4
shows MEGAREDUCE’s ability to optimize the constellation
size and reduce the number of required satellites while
satisfying various survivability requirements. As the surviv-
ability increases, MEGAREDUCE dynamically increases the
constellation size and constructs more edge-disjoint redundant
paths to improve the survivability of the LSN. Even in the
case of rmin = 6, MEGAREDUCE can reduce 20.05% and
21.88% of the total number of required satellites for Starlink
and Kuiper respectively.
Similarly, Figure 5 draws MEGAREDUCE’s optimization
effectiveness under different capacity requirements. Specifically,
we change the average per-cell capacity requirements form 20
to 40Mbps, and the results in Figure 5 demonstrate MEGARE-
DUCE’s ability to dynamically optimize the constellation size.
The number of required satellites increases as the per-cell
capacity demand increases, since more satellites can provide
more high-throughput spot beams to serve terrestrial cells.
In addition, we also verify MEGAREDUCE’s ability to adapt
to various delay constraints, as shown in Figure 6. The delay
constraint λ indicates that the length of redundant paths for
a communication pair (i, j) should not exceed ⌈λ · LSP
ij ⌉,
where LSP
ij
is the length of the shortest path between i
and j. MEGAREDUCE can dynamically adjust the number
of required satellites to build redundant paths with similar
0
1000
2000
3000
4000
5000
1.35
1.5
2
2.5
3
# of Required Satellites
Starlink
MegaReduce
Delay constraint(𝝀𝝀)
(a) Starlink optimization.
0
500
1000
1500
2000
2500
3000
3500
1.35
1.5
2
2.5
3
# of Required Satellites
Kuiper
MegaReduce
Delay constraint(𝝀𝝀)
(b) Kuiper optimization.
Fig. 6: Required # of satellites v.s. delay constraints.
(a) rmin = 2.
(b) rmin = 4.
Fig. 7: Required # of satellites under various orbital parameters.
lengths for communication pairs. As the value of λ decreases,
an LSN requires a denser constellation to provide more length-
constrained redundant paths.
C. Optimizing LSN Design under Various Orbital Parameters
Next we evaluate MEGAREDUCE under various orbital pa-
rameters. Figure 7 shows a 3D surface plot of the required LEO
satellite number versus the altitude of the satellites and the orbit
inclination, under different survivability requirements (rmin).
We make two main observations. First, the required number
of satellites decreases as the orbit altitude increases. This is
mainly because that a higher altitude indicates a wider satellite
coverage, and thus one cell can be served by more satellites
which increase the number of redundant links. However, the
increased altitude can also involve higher space-to-ground
propagation delay for LSN communications. Second, we find
that the required number of satellites increases as the orbit
inclination grows. This is because most communication cells
are located inside [−70◦, 70◦] latitude bands. A constellation
with more inclined orbits covering this range can provide higher
satellite density for those “hot cells” with more terrestrial users,
and enable better network survivability as well as performance.
D. Resilience Analysis
Further, we evaluate the resilience of LSNs designed by
MEGAREDUCE. We consider two failure models: (1) solar
storm failure model, in which a collection of nearby satellites
are destroyed at the same time (e.g., like the 49 Starlink
satellites doomed on Feb. 4, 2022 [1]); and (2) random failure
model, in which satellites fail with a certain probability (e.g.,
due to hardware malfunctions or onboard component aging).
We assume that the high layer routing protocols can efficiently
detect redundant paths and switch to the backup path if
the current path fails. We compare MEGAREDUCE with a
recent constellation design approach called ultra-dense LSN
design [12]. Figure 8 plots the reachability rate, which is
528
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

0 10 20 30 40 50 60 70 80 90100
# of destroyed satellites
30
40
50
60
70
80
90
100
Reachability(%)
MegaRudce(680)
Ultradense(680)
MegaRudce(830)
Ultradense(830)
MegaRudce(940)
Ultradense(940)
(a) Solar storm failure model.
0
2
4
6
8 10 12 14 16 18 20
satellite failure rate(%)
30
40
50
60
70
80
90
100
Reachability(%)
MegaReduce(680)
Ultradense(680)
MegaReduce(830)
Ultradense(830)
MegaReduce(940)
Ultradense(940)
(b) Random failure model.
Fig. 8: Resilience analysis. The values in parentheses indicate
the number of satellites used to build the LSN by each method.
    0
      2
      4
      6
 Survivability
MegaReduce
Starlink
2019.12
2020.06
2020.12
2021.06
2021.12
2022.06
2022.12
2023.06
Time
   0
1000
2000
3000
4000
# of Satellites 
Starlink
(a) Incremental deployment.
    0
      2
      4
      6
 Survivability
Starlink(AAR=3%)
MegaReduce(AAR=3%)
Starlink(AAR=5%)
MegaReduce(AAR=5%)
2023.06
2023.12
2024.06
2024.12
2025.06
2025.12
2026.06
2026.12
Time
2500
3000
3500
4000
# of Satellites 
Starlink(AAR=3%)
Starlink(AAR=5%)
(b) Constellation adjustment.
Fig. 9: MEGAREDUCE can guide the incremental deployment
and constellation adjustment scenarios for an LSN.
calculated as the ratio of the number of inter-reachable pairs
to the total number of communication pairs with different
number of satellites used to construct the LSN. We observe
that with the increasing number of destroyed satellites and
failure rate, the total amount of reachable pairs reduces
due to the lack of survival valid path. However, with the
same constellation population, MEGAREDUCE outperforms
UltraDense by achieving higher reachability ratio since it jointly
optimizes the LSN design under survivability and performance
constraints, guaranteeing a stronger ability to resist failures.
E. Case Study
Note that essentially MEGAREDUCE represents a function
N sat
min ←F(req) where N sat
min stands for the minimum number
of required satellites and req refers to various requirements.
With F, we can easily calculate the inverse version of
MEGAREDUCE, i.e., req ←F−1(N sat), which indicates the
achievable requirement under a given bound of satellite number.
For example, if we have known that it needs at least 1500/1600
satellites to construct an LSN satisfying rmin = 5/6, then we
can deduce that given 1550 satellites, we can build an LSN
with the survivability rmin up to 5. Based on this insight, we
perform two case studies to demonstrate how MEGAREDUCE
can help the deployment and maintenance of future LSNs.
Incremental deployment. Due to the high satellite density of
emerging mega-constellations, typically satellite operators have
to launch their satellites in multiple batches (i.e., incremental
deployment) and it usually takes several years to completely
deploy the entire LSN. As the LSN size gradually increases, it
should be valuable if the LSN can maintain good survivability
in its early stage even with only a few number of satellites
deployed in orbit. We show that in each launch during the
incremental deployment, MEGAREDUCE can help an operator
obtain a partial LSN design with the best survivability.
Figure 9a plots the number of satellites and the survivability
trend of real Starlink from Dec. 2019 to June. 2023. We obtain
the historical data of Starlink from SpaceTrack [52]. With
the deployment of Starlink, we observe that the survivability
parameter rmin increases from 0 to 5 within 3.5 years. Imaging
in a parallel virtual world, we use the same number of satellites
in each launch of real Starlink, but we follow MEGAREDUCE to
construct the LSN. Then we plot the survivability curve for two
kinds of constellation design with the same number of satellites.
Results in Figure 9a show that guided by MEGAREDUCE, the
constellation can achieve higher survivability even in the early
stage of the incremental deployment.
In-orbit constellation adjustment. Many mega-constellations
are built upon small satellites with shorter lifetime. Even after
an LSN has been completely deployed, some satellites will
gradually malfunction over time. MEGAREDUCE can guide
an operator to adjust the LSN topology and maintain a high
survivability even though the LSN population decreases. Taking
Starlink as an example. From the historical data [52] over the
past 3 years, we find the annual decay rate (AAR) of Starlink
is about 2.6%, which indicates that about 2.6% satellites in
the constellation become inactive per year. Figure 9b plots the
estimated size of Starlink with different AARs in the next 3
years. If no new satellites are launched, then the survivability
will decrease gradually. We also plot the survivability curve
if the operator adjusts the LSN structure in time when the
number of satellites decreases following MEGAREDUCE’s
solution, as plotted in Figure 9b. MEGAREDUCE can provide
insights and guidelines for satellite operators to conduct in-
orbit constellation adjustment to maintain high survivability
when the mega-constellation gradually decays.
VI. CONCLUSION AND ACKNOWLEDGEMENT
From a network perspective, how many satellites exactly
are needed to construct a survivable and performant LSN? In
this paper, we first formulate the survivable and performant
LSN design (SPLD) problem, which aims at finding the
minimum number of needed satellites while meeting various
survivability and performance constraints. Then we propose
MEGAREDUCE, a requirement-driven, cost-effective LSN
design approach which can calculate near-optimal solutions of
SPLD in polynomial time. Finally, we conduct large-scale LSN
simulation to verify the cost-effectiveness of MEGAREDUCE
for guiding the construction of survivable and performant LSNs.
We thank all anonymous reviewers for their valuable feed-
back. This work was supported by the National Key Research
and Development Program of China (No. 2022YFB3105202)
and National Natural Science Foundation of China (NSFC No.
62372259 and No. 62132004). Hewu Li is the corresponding
author. The authors have provided public access to their code
and/or data at https://github.com/SpaceNetLab/MegaReduce.
529
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

REFERENCES
[1] Solar storms can destroy satellites with ease. https://www.space.com/
solar-storms-destroy-satellites.
[2] Raja Pandi Perumal, Holger Voos, Florio Dalla Vedova, and Hubert
Moser. Small satellite reliability: A decade in review. 2021.
[3] Jiawei Wang, Chunxiao Jiang, Linling Kuang, and Rui Han. Satellite
multi-beam collaborative scheduling in satellite aviation communications.
IEEE Transactions on Wireless Communications (TWC), 2023.
[4] Inigo del Portillo, Bruce G. Cameron, and Edward F. Crawley. A technical
comparison of three low earth orbit satellite constellation systems to
provide global broadband. Acta Astronautica, 2019.
[5] IRIS2: The planned EU mega-constellation. https://en.wikipedia.org/
wiki/IRIS%C2%B2.
[6] Sfera telecommunication satellite constellation. https://en.wikipedia.org/
wiki/Sfera (satellite constellation).
[7] Yi Ching Chou, Xiaoqiang Ma, Feng Wang, Sami Ma, Sen Hung Wong,
and Jiangchuan Liu. Towards sustainable multi-tier space networking for
LEO satellite constellations. In IEEE/ACM 30th International Symposium
on Quality of Service (IWQoS), 2022.
[8] David C Beste.
Design of satellite constellations for optimal con-
tinuous coverage.
IEEE Transactions on Aerospace and Electronic
Systems (TAES), 1978.
[9] Daniele Mortari, Mauro De Sanctis, and Marco Lucente. Design of
flower constellations for telecommunication services. Proceedings of the
IEEE, 2011.
[10] Zhe Liu, Wei Guo, Weisheng Hu, and Ming Xia. Delay minimization
for progressive construction of satellite constellation network. IEEE
Communications Letters, 2015.
[11] Debopam Bhattacherjee and Ankit Singla. Network topology design at
27,000 km/hour. In Proceedings of the 15th International Conference on
Emerging Networking Experiments And Technologies (CoNEXT), 2019.
[12] Ruoqi Deng, Boya Di, Hongliang Zhang, Linling Kuang, and Lingyang
Song. Ultra-dense LEO satellite constellations: How many LEO satellites
do we need? IEEE Transactions on Wireless Communications (TWC),
2021.
[13] Lap Chi Lau, Joseph Naor, Mohammad R Salavatipour, and Mohit
Singh. Survivable network design with degree or order constraints. In
Proceedings of the thirty-ninth annual ACM symposium on theory of
computing, 2007.
[14] Anupam Gupta, Ravishankar Krishnaswamy, and R Ravi. Online and
stochastic survivable network design. In Proceedings of the forty-first
annual ACM symposium on Theory of computing, 2009.
[15] Alina Ene and Ali Vakilian.
Improved approximation algorithms
for degree-bounded network design problems with node connectivity
requirements. In Proceedings of the forty-sixth annual ACM symposium
on Theory of computing, 2014.
[16] Xiangming Zhu and Chunxiao Jiang. Delay optimization for cooperative
multi-tier computing in integrated satellite-terrestrial networks. IEEE
Journal on Selected Areas in Communications (JSAC), 2022.
[17] Giacomo Giuliari, Tobias Klenze, Markus Legner, David Basin, Adrian
Perrig, and Ankit Singla. Internet backbones in space. ACM SIGCOMM
Computer Communication Review, 2020.
[18] Iridium satellite constellation.
https://en.wikipedia.org/wiki/Iridium
satellite constellation.
[19] Starlink: Over 1.5m subscribers. https://advanced-television.com/2023/
05/09/starlink-1-5m-subs-worldwide/.
[20] OneWeb. https://oneweb.net/.
[21] Telesat. https://www.telesat.com/leo-satellites/.
[22] Amazon Project Kuiper. https://en.wikipedia.org/wiki/Kuiper Systems.
[23] Hugh Lewis, Jonas Radtke, Alessandro Rossi, James Beck, Michael
Oswald, Pamela Anderson, Benjamin Bastida Virgili, and Holger Krag.
Sensitivity of the space debris environment to large constellations and
small satellites. Journal of the British Interplanetary Society, 2017.
[24] Samantha M Lawler, Aaron C Boley, and Hanno Rein.
Visibility
predictions for near-future satellite megaconstellations: latitudes near
50 will experience the worst light pollution. The Astronomical Journal,
2021.
[25] Ying Huang, Shilin Li, Wei Li, Weijun Lu, and Xueling Zhang.
Co-frequency interference analysis between ultra-large-scale NGSO
constellations and gso systems.
Journal of Communications and
Information Networks, 2023.
[26] Markus Werner, Axel Jahn, Erich Lutz, and Axel Bottcher. Analysis
of system parameters for LEO/ICO-satellite communication networks.
IEEE Journal on Selected areas in Communications (JSAC), 1995.
[27] C-J Wang. Structural properties of a low earth orbit satellite constellation-
the walker delta network. In Proceedings of MILCOM’93-IEEE Military
Communications Conference. IEEE, 1993.
[28] Ji Jiang, Shi Yan, and Mugen Peng. Regional LEO satellite constellation
design based on user requirements. In IEEE/CIC International Conference
on Communications in China (ICCC), 2018.
[29] Kamal Jain. A factor 2 approximation algorithm for the generalized
steiner network problem. Combinatorica, 2001.
[30] Nikhil Bansal, Rohit Khandekar, and Viswanath Nagarajan. Additive
guarantees for degree bounded directed network design. In Proceedings
of the fortieth annual ACM symposium on Theory of computing, 2008.
[31] Sebastian
Orlowski,
Roland
Wess¨aly,
Michal
Pi´oro,
and
Artur
Tomaszewski. SNDlib 1.0—Survivable network design library. Networks:
An International Journal, 2010.
[32] Quentin Botton, Bernard Fortz, Luis Gouveia, and Michael Poss. Benders
decomposition for the hop-constrained survivable network design problem.
INFORMS journal on computing, 2013.
[33] Dahai Xu, Elliot Anshelevich, and Mung Chiang. On survivable access
network design: Complexity and algorithms. In International Conference
on Computer Communications (INFOCOM). IEEE, 2008.
[34] Yang Cao, Shao-Yu Lien, and Ying-Chang Liang. Multi-tier collaborative
deep reinforcement learning for non-terrestrial network empowered
vehicular connections. In 29th International Conference on Network
Protocols (ICNP). IEEE, 2021.
[35] Qian Chen, Weixiao Meng, Tony QS Quek, and Shuyi Chen. Multi-tier
hybrid offloading for computation-aware iot applications in civil aircraft-
augmented sagin. IEEE Journal on Selected Areas in Communications
(JSAC), 2022.
[36] Tian Pan, Tao Huang, Xingchen Li, Yujie Chen, Wenhao Xue, and Yunjie
Liu. OPSPF: orbit prediction shortest path first routing for resilient LEO
satellite networks. In International Conference on Communications (ICC).
IEEE, 2019.
[37] Xiang Zhang, Yuan Yang, Mingwei Xu, and Jing Luo. ASER: Scalable
distributed routing protocol for LEO satellite networks.
In 46th
Conference on Local Computer Networks (LCN). IEEE, 2021.
[38] Zeqi Lai, Weisen Liu, Qian Wu, Hewu Li, Jingxi Xu, and Jianping Wu.
SpaceRTC: Unleashing the low-latency potential of mega-constellations
for real-time communications. In International Conference on Computer
Communications (INFOCOM). IEEE, 2022.
[39] Zeqi Lai, Hewu Li, Yikun Wang, Qian Wu, Yangtao Deng, Jun Liu,
Yuanjie Li, and Jianping Wu.
Achieving resilient and performance-
guaranteed routing in space-terrestrial integrated networks. In Interna-
tional Conference on Computer Communications (INFOCOM). IEEE,
2023.
[40] H3: Hexagonal hierarchical geospatial indexing system.
https://
h3geo.org/.
[41] Nikola Gvozdiev, Stefano Vissicchio, Brad Karp, and Mark Handley.
On low-latency-capable topologies, and their impact on the design of
intra-domain routing. In Proceedings of the 2018 Conference of the ACM
Special Interest Group on Data Communication (SIGCOMM), 2018.
[42] John G Walker.
Satellite constellations.
Journal of the British
Interplanetary Society, 37:559, 1984.
[43] SpaceX Gen2 NGSO. https://docs.fcc.gov/public/attachments/FCC-22-
91A1.pdf.
[44] Amazon Kuiper System. https://docs.fcc.gov/public/attachments/FCC-
20-102A1.pdf.
[45] Zeqi Lai, Hewu Li, and Jihao Li. StarPerf: Characterizing network
performance for emerging mega-constellations. In 28th International
Conference on Network Protocols (ICNP). IEEE, 2020.
[46] Starlink coverage tracker. https://starlink.sx/.
[47] Giacomo Giuliari, Tommaso Ciussani, Adrian Perrig, and Ankit Singla.
ICARUS: Attacking low earth orbit satellite networks. In USENIX Annual
Technical Conference (ATC), 2021.
[48] Gurobi
optimization.
https://www.gurobi.com/solutions/gurobi-
optimizer/.
[49] Skyfield. https://github.com/skyfielders/python-skyfield.
[50] Starlink coverage map. https://www.starlink.com/map.
[51] Regions
in
the
world
by
population
(2023).
https:
//www.worldometers.info/world-population/population-by-region/.
[52] Space-Track. https://www.space-track.org/.
530
Authorized licensed use limited to: Tsinghua University. Downloaded on September 02,2024 at 10:45:52 UTC from IEEE Xplore.  Restrictions apply. 

